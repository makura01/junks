[Unixという考え方 ]

こんばんわ、まくらです
今日もよろしくです。


<h3>はじめに</h3>
  <p>Unixという考え方(オーム社)を読んでみました。分量的にも、一気に読み進めて重要なところを反復していくのが、効果ありそうですね。</p>
  <h4>Unix定理</h4>
  <ol>
    <li>small is beautifle</li>
    <li>一つのプログラミングには一つのことをうまくやらせる</li>
    <li>できるだけ早く試作を作成する</li>
    <li>効率より移植性</li>
    <li>数値データはASCIIフラットファイルに保存する</li>
    <li>ソフトウェアの梃子を有効に活用する</li>
    <li>シェルスクリプトを使うことで梃子の効果と移植性を高める</li>
    <li>過度の対話的インタフェースを避ける</li>
    <li>すべてのプログラムファイルをフィルターにする</li>
  </ol>

  <h4>感想</h4>
    <p>非常に有用なUNIXの概念が、短いページでか「これでもか！」といっぱい書かれてます。これは何度も読むでしょう。この本とは仲良くなれそうです(＾ω＾)</p>
    <p>僕が納得できたというか腹落ちできた内容は、上記のリストから(1, 2, 3, 7)です多分内容を簡単で理解しやすかったのではないかと思い出すが。。それらを対象にして考えてみます。</p>
   
    <h5>定理1と定理2</5>
     <backquote>
     小さなプログラムの「目的」は、最小限のものに抑えられ、
     一つのことを上手くこなすことに焦点が合っています。2,3のアルゴリズムしか含まず、
     そのほとんどが目的の作業に直接関係しています。
     また、小さなプログラムは他のツールと組み合わせやすいですい。
     大きなプログラムより小さなプログラムを書く方がいいということです。
     </backquote>
   <h5>定理3</h5>
     <backquote>
       試作が早ければ早いほど、製品のリリースは早まる。
       施策によって何がうまくいくかが分かり、
       さらに重要なことに何が上手くいかないかがわかる。
     </backquote>
     <h6>いわゆるwaterfall modelと異なる</h6>
     <ol>
      <li>短い機能仕様書を書く</li>
      <li>ソフトウェアを書く</li>
      <li>テストして書き直す。満足できるまで、これを繰り替えず</li>
      <li>詳細なドキュメントを(必要なら)書く</li>
     </ol>

   <h5>定理7</h5>
     <p>シェルスクリプトは自分でけっこう独学したんですけど、基本的なコマンドと簡単な概念、grep, awkなどはまあまあ使える。という程度です。　そして一旦挫折していました笑 しかし、この本を読んでシェルスクリプトの移植性の高さなどを知って、シェルスクリプトの潜在能力の例みることができたので。もう一回shell挑戦してみようかなあと思える、ことは多分いいことです。</p>

     <h3>参考：</h3>
