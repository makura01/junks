共有ロックと専有ロック
S/MIME -> 内容の暗号化と署名さ
サージプロテクト
システム監査手順
パリティーチェック
ページング方式 -> 要復習
スタブ, ドライバ
-> 未完成の下位モジュールは上位からの呼びかけに対して応答する
-> ボトムアップテスト未完成の上位モジュールの代わりにの命令を呼び出す。
スラッシング
メモリインタリーブ > 主記憶装置をいくつかの区画(バンク)に分割して同時アクセスすることで、高速化を図る。 
磁気ディスク装置のアクセス時間 > 位置決め時間 + 回転待ち時間 + データ転送時間
スループット > 単位時間当たりの仕事量
RASIS > 信頼性, 可用性, 保守性, 保全性, 安全性
ジョブ > 利用者から見た仕事の単位
ジョブスケジューラー
  > リーダ       > ジョブの入力
  > イニシエータ > 資源の割り当て
  > ターミネータ > 資源の解放
  > ライタ       > ジョブの出力
スプーリング > 入出力データをいったん磁気ディスク装置などに割り当てる。CPUの有効活用
タスク > コンピューターから見た仕事の単位
タスクの状態遷移 > 実行可能状態, 実行状態, 待ち時間
マルチプログラミング > 見かけ上、複数のタスクを並行で実行する。CPUの有効活用。
メモリのフラグメンテーション > ガーベジコレクション
オーバレイ > 排他的なセグメント単位で管理、実行に必要なセグメントのみロードする。
ページング > ページ(固定長)単位で管理 > ページング数の増加 > 処理効率の減少 > スラッシング
再配置可能(リローケタブル) > どこに配置しても実行可能
再入可能(リエントラント) > 複数のタスクが同時に使用
再使用可能(リユーザブル) > 再ロードしなくても使用可能
再帰的(リカーシブ) > 自分自身を呼びだす
インタプリタ > １命令ずつ解釈し、実行する。
コンパイラ > 原始プログラム -> 目的ブログラム
リンカ > 目的プログラム -> ロードモジュール
動的リンキング > 実行時にリンクする
静的リンキング > 連携編集時にあらかじめリンクさせとく。
ローダ > ロードモジュールを主記憶上にロードする。
標本化 -> 量子化 -> 符号化
PCM方式(バルス符号変調方式) > アナログの音声信号をデジタルに反感する代表的な方法。
バッチ処理 > まとめて処理, 一括処理
ストアドプロシージャ > 利用頻度の高い命令郡をあらかじめ、サーバ上に用意しておくことで、ネットーワーク負荷を軽減。
シンクライアントシステム > ?
デュプレックスシステム > 2系列 -> 現用系と待機系、現用系に障害が発生すれば切り替える。
コールドスタンバイ > 障害が発生してからオンライン処理プログラムを起動する。
ホットスタンバイ > あらかじめオンライン処理プログラムを起動しておく。
デュアルシステム > 同じ処理をして結果を照合する。障害が発生すれば切り離す、信頼性は高い
RAID > 複数台の磁気ディスク -> アクセスの高速化、高信頼性
RAID0 > データを分散して記録(ストライピング) -> アクセスの高速化
RAID1 > 同じデータを別々の磁気ディスクに書き込む -> 高信頼性
RAID3 > データを分散・パリティじょうほうを固定して記録する -> アクセスの高速化・高信頼性
RAID5 > データとパリティ情報を分散して記録する -> アクセスの高速化・高信頼性
フェールセーフ > 安全重視
フェールソフト > 継続重視
MIPS > 1秒間あたりの命令数を百万単位で表現する
平均故障間隔 > 稼働している平均時間, MTBF
平均修理時間 > 修理している平均時間, MTTR
稼働率 > MTBF / (MTBF + MTTR)
ブラックボックステスト > 外部仕様に着目する
ホワイトボックステスト > 内部構造に着目する
ラウンドロビン > 持ち回りで責任者になり検証する
ウォークスルー > レビュー対象物の作成者が責任者になり検証する
インスペクション > 第三者が責任者となり検証する
PMBOK > プロジェクトを管理するマネジメント手法が体系化されました。「統合」「スコープ」「タイム」「コスト」「品質」「人的資源」「コミュニケーション」「リスク」「調達」以上、9つの知識エリアから、プロジェクト管理を行う。
ADSL > 既存の電話回線を利用した高速データ通信。
パリティーチェック > ???
外部設計 > 利用者の立場から見たシステム設計、論理的な設計
内部設計 > 開発者の立場から見たシステム設計、物理的な設計
データ結合 > もっとも結合度が弱く、独立性が高い
システム監査 > 第三者の立場で調査・報告
DHCP > 動的にipアドレスを割り当てる
NAT/NAPT > グローバルアドレス  <=> プライベートアドレス
IPアドレス > ネットワーク部 + ホスト部
サブネットマスク > ネットワーク部(サブネット部を含む)に1ホスト部に0
ARP(Address Resolution Protocol) > 相手のIPアドレスはわかっているがMACアドレスが未知の場合、そのMACアドレスを取得するために、使用されるプロトコル <=> RARP
リピーター > 物理層で接続。減衰した信号を増幅・再生 -> 伝送路延長
ブリッジ > データリンク層で接続。宛先MACアドレスで中継
ルータ > ねットワーク層で接続。宛先IPアドレスで中継、経路選択(ルーティング)
ゲートウェイ > 全ての層から接続。プロトコル変換。
専有ロック・共有ロック
情報セキュリティーの3要素 > 機密性, 完全性, 可用性
機密性 > 第三者に情報が漏洩しないようにすること
完全性 > 情報及び処理方法が、正確・完全であるようにすること
可用性 > 利用者が必要な時に情報資産を利用できるようにすること
クロスサイトスクリプティング -> (対策)エスケープ処理
SQLインジェクション -> (対策)バインド機構
DNSキャッシュポイズニング > (対策) DNSサーバを最新化する
セッションハイジャック > ログイン中の利用者のセッションIDを不正に入手して、その利用者になりすましてアクセスする行為。(対策)セッションIDを推測が難しいものにするなど。
コンピューターウイルスの3機能 > 自己伝染機能・潜伏機能・発病・機能
スキーマ > データの内容、データの論理構造、記憶方式や編成など、データベースの構造を記述したものです。
射影 > 表から選択した列(属性)を取り出す操作
シンクライアント > ユーザが使用する端末にサーバ接続必要最小限のネットワーク、入出力
インベントリー > PCに関する情報を定期的にシステムから取得する
内部割込み / 外部割込み > 実行中のプログラム内の不正アクセス / 内部割込みの原因以外での割込み
損益分岐点 > = 固定費 / (1 - 変動比率)
?プロジェクト作業日数
プリエンティブ > OSがCPUやシステム資源を管理しCPU使用時間や優先度などによりタスクを実行状態や実行可能状態に切り替える方式。
ストアドプロシージャ > データベースに対する一連の処理をまとめた手続きにして、データベース管理システムに保存したもの。
逆アセンブル > 実行ファイルをアセンブリ言語に逆変換すること。
ファンクションポイント > 外部入出力や内部論理ファイル、照会、インターフェースなどの個数や特性などから開発規模を見積もる。
セキュリティー関連以外とでるなあ。
てかこれ、完全にawkしにくい構造だけど、なんとかなるかな。
?プロジェクトのアローダイアログ
SOA
