==========
「入門python2」
著者 -> Bill Lubanovic
初版 -> 2016/1/21
==========

1章の
内容どうでもいいですね。

2章
print()
type()
ヒアドキュメント -> """ or ''' => 複数行文字列を表現するのに使う
*演算子を使うと、文字列を繰り返すことができる。
スライス -> 文字列から部分文字列に
スライスの使いかたなあ。出てくるたびに少しずつおぼえていこうか。

3章 リスト、タプル、辞書、集合

1. pythonのデータ構造

[タプル]
イミュータブル。
あまり使われることはないそうです。
宣言する時は、かっこなしのカンマ区切り。
実際に出力する時は()に囲われています。

[リスト]
ミュータブル。配列のような。[]ではさむ。
リストを操作する関数が豊富に使われています。

[辞書]
並びはバラバラ。
連想配列みたいな感じ。
{key: value}の形で宣言です。

[集合]
辞書から値をなくしたバージョンらしいです。
値は辞書のkeyのように、一意でなければいけません。
集合理論とセットでデータ構造を表すことが可能です。
例えば、積集合では、{a & b} と書くことで、
両方の集合に共通な要素からなる集合を作ることができます。
和集合も同様に、少なくともどちらかに集合に含まれている要素の集合を作れます。




かなり重要な回だった。
それぞれの関数をもう一度チェックして、
先に進んだほうがよい。

4章 コード構造

  コメント
  \による文章の継続
  if elif elseによる比較
  whileによる反復処理
    break
    continue
  forによる反復処理
    イテラブルオブジェクト -> 文字列, タプル, 辞書, 集合
      for rabbit in rabbits:
        print (rabbit)
  リスト内包表記
    普通
      number_list = [number for number in range(1,6)] => [1,2,3,4,5]
    条件あり
      a_list = [number for number in range(1,6) if number % 2 == 1] => [1,3,5]
    
    (row, col) 形式のタプル
      rows = range(1,4)
      cols = range(1,3)
      cells = [(row, col) for row in rows for col in cols]
      for cell in cells:
        print(cell)
      => (1,1) (1,2) (2,1) (2,2)...
     タプルのアンパック
      for row, col in cells:
        print (row, col)
  辞書包括表記
    word = 'letters'
    letter_counts = {letter: word.count(letter) for letter in word}
  集合内包表記
/*こんなに全てのデータ型に対してパターンをのせてるってことは、
内包表記はよっぽど重要なトピックなのだろう。*/
    a_set = {nuber for number in range(1,6) if nuber %3 == 1}
    辞書型と同じように扱える

  関数(粒度間違えてる？)
    関数の形式
      例えば、def agree():
                return true
              if agree:
                print ('hoge')
              else:
                print ('hage')
      みたいな形式

   位置引数
     def menu (wine, entree, dessert):
       return {'wine': wine, 'entree': entree, 'dessert': dessert}
     menu ('chardonnay', 'chicken', 'cake')
   キーワード引数
     def menu('frontenac', dessert='flan', wine='fish')

   デフォルト引数値の指定
     def menu(wine, entree, dessert='pudding')
       引数に値を渡さなければデフォルトの値になる。
       与えれば、値が上書きされる
   *による位置引数のタプル化
     可変個の位置引数をタプルにまとめてその仮引数にセットする。
     def print_args(*args):
       print (hoge)

     print_args(3, 2, 1, 'wait', 'uh...')
     これで正しく機能する。
     *を使う時にargsを使うことはpythonコミュニティでは慣習
   **によるキーワード引数の辞書化
     def print_kwargs(**kwargs):
      print ('keyword arguments:', kwargs)
     呼び出しする
     print_kwargs(wine='merlot', entree='mutton', dessert='macaroon')
     => Keyword arguments: {'dessert': 'macaroon', 'wine': 'merlot', 'entree': 'mutton'}
     argsと同様にkwargsを慣習的に使うらしい。
   一人前のオブジェクトとしての関数
     関数はオブジェクトとして、変数に関数を代入したり、ほかの関数の引数として関数を使ったり、
     関数からの戻り値として関数を返したりできる。
     
     def answer():
       print(42)
     
     def run_something (func):
       func()
     
     run_somethingu(answer) => 42

   関数内関数

   クロージャ
     うーん、よくわからん
   
   無名関数：ラムダ関数
     うーん、よくわからん
   => あとでリサーチして、記事にまとめる
   
 ジェネレーター

 デコレーター

難しくなってきた。
特に、クロージャー、ラムダ関数、ジェネレーター、デコレーターの部分は、
復習必要。

4章、最後らへん飛ばしてしまった。



